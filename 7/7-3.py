# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка.
# В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# В классе должны быть реализованы методы перегрузки арифметических операторов: сложение (__add__()),
# вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное
# (не целочисленное) деление клеток, соответственно.
# В методе деления должно осуществляться округление значения # до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение количества
# ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order() вернет строку:
# *****\n*****\n*****.


class Cell:
    def __init__(self, n):
        self.__parts = n

    def make_order(self, n):
        result = ""
        k = self.__parts
        while k > n:
            result += "*" * n + "\n"
            k = k-n
        result += "*"*k
        return result

    def __add__(self, other):
        if type(self) != type(other):
            raise Exception("Второй аргумент сложения не клетка")
        return Cell(self.__parts + other.__parts)

    def __sub__(self, other):
        if type(self) != type(other):
            raise Exception("Второй аргумент сложения не клетка")
        if self.__parts <= other.__parts:
            raise Exception("Во второй клетке больше ячеек, чем в первой")
        return Cell(self.__parts - other.__parts)

    def __mul__(self, other):
        if type(self) != type(other):
            raise Exception("Второй аргумент сложения не клетка")
        return Cell(self.__parts * other.__parts)

    def __truediv__(self, other):
        if type(self) != type(other):
            raise Exception("Второй аргумент сложения не клетка")
        if self.__parts <= other.__parts:
            raise Exception("Во второй клетке больше ячеек, чем в первой")
        return Cell(self.__parts // other.__parts)


print(((Cell(6)+Cell(4))*Cell(20)/Cell(2)-Cell(74)).make_order(5))
